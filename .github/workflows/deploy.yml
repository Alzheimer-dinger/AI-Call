name: Build, Push, and Deploy

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

env:
  # 환경 변수 정의 (GitHub Secrets 및 고정 값 사용)
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
  REPOSITORY_NAME: ${{ secrets.ARTIFACT_REPO_NAME }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  
  # 컨테이너에 주입될 환경 변수들 (비밀이 아닌 것들은 여기에 고정 값으로 정의)
  GEMINI_MODEL: gemini-live-2.5-flash-preview
  DB_NAME: alzheimerdinger
  PINECONE_INDEX_NAME: alzheimer-memories
  PINECONE_DIMENSION: 768
  PINECONE_METRIC: cosine
  PINECONE_CLOUD: aws
  PINECONE_REGION: us-east-1
  EMBEDDING_MODEL: models/text-embedding-001

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 실행

    steps:
      # Step 1: Check out the repository so the job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}' # GitHub Secret에서 서비스 계정 키 사용
      
      # Step 3: Set up the Google Cloud SDK
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # Step 4: Configure Docker to use the gcloud command-line tool as a credential helper
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image to Artifact Registry # 5. Docker 이미지 빌드 및 푸시
        run: |
          # Docker 이미지의 전체 URI 정의
          IMAGE_URI="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO_NAME }}/alzheimer-call:latest"
          
          # Docker 이미지 빌드
          echo "Building Docker image: ${IMAGE_URI}"
          docker build -t $IMAGE_URI .
          
          # Docker 이미지 푸시
          echo "Pushing Docker image to Artifact Registry..."
          docker push $IMAGE_URI
          
          # 다음 단계에서 사용할 수 있도록 이미지 URI를 출력
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          
          echo "Docker image pushed successfully!"

      - name: Deploy to Compute Engine via SSH # 6. Compute Engine 인스턴스에 SSH로 접속하여 배포
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            # 사용할 Docker 이미지의 전체 URI
            APP_IMAGE_URI="${{ env.IMAGE_URI }}" # 이전 단계에서 설정된 환경 변수 사용
            APP_CONTAINER_NAME="alzheimer-call-container"
            
            # FastAPI 서버 포트 설정
            APP_PORT_HOST="8765" # 호스트에 노출할 포트
            APP_PORT_CONTAINER="8765" # 컨테이너 내부의 포트 (FastAPI 서버가 리슨하는 포트와 일치)

            echo "Stopping and removing existing container (if any)..."
            # 기존 컨테이너 중지 (실행 중이 아니라도 오류 없이 계속 진행)
            docker stop ${APP_CONTAINER_NAME} || true
            # 기존 컨테이너 제거 (존재하지 않아도 오류 없이 계속 진행)
            docker rm ${APP_CONTAINER_NAME} || true

            echo "Pulling latest Docker image: ${APP_IMAGE_URI}..."
            docker pull ${APP_IMAGE_URI}

            echo "Running new Docker container..."
            docker run -d \
              --add-host="host.docker.internal:host-gateway" \
              --name ${APP_CONTAINER_NAME} \
              -p ${APP_PORT_HOST}:${APP_PORT_CONTAINER} \
              -v ${{ secrets.GCP_IAM_PATH }}:/app/config/key.json \
              --restart always \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              -e GEMINI_MODEL="${{ env.GEMINI_MODEL }}" \
              -e MONGO_CONNECTION_STRING="${{ secrets.MONGO_CONNECTION_STRING }}" \
              -e DB_NAME="${{ env.DB_NAME }}" \
              -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
              -e PINECONE_INDEX_NAME="${{ env.PINECONE_INDEX_NAME }}" \
              -e PINECONE_DIMENSION="${{ env.PINECONE_DIMENSION }}" \
              -e PINECONE_METRIC="${{ env.PINECONE_METRIC }}" \
              -e PINECONE_CLOUD="${{ env.PINECONE_CLOUD }}" \
              -e PINECONE_REGION="${{ env.PINECONE_REGION }}" \
              -e EMBEDDING_MODEL="${{ env.EMBEDDING_MODEL }}" \
              -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              -e GCS_BUCKET_NAME="${{ secrets.GCS_BUCKET_NAME }}" \
              ${APP_IMAGE_URI}

            echo "Deployment to Compute Engine completed successfully!"
